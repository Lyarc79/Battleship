{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/./modules/ship.js","webpack://battleship/./modules/gameboard.js","webpack://battleship/./modules/player.js","webpack://battleship/./modules/DOMController.js","webpack://battleship/./modules/gameController.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","\nclass Ship {\n    constructor(length){\n        this.length = length;\n        this.hitCount = 0;\n        this.coordinates = [];\n    }\n\n    hit(){\n        if(this.hitCount < this.length){\n            this.hitCount++;\n        }\n    }\n\n    isSunk(){\n        return this.length === this.hitCount;\n    }\n}\n\nexport default Ship;","\nimport Ship from './ship.js';\n\nclass Gameboard {\n    constructor(){\n        this.ships = [];\n        this.missedAttacks = [];\n        this.grid = {};\n        this.attackedCoordinates = new Set();\n    }\n\n    clearBoard(){\n        this.grid = {};\n        this.ships = [];\n        this.missedAttacks = [];\n        this.attackedCoordinates = new Set();\n    }\n\n    isOutOfBounds([x, y]) {\n        return x < 0 || x >= 10 || y < 0 || y >= 10;\n    }\n\n    isOccupied([x, y]) {\n        return this.grid[`${x},${y}`] !== undefined;\n    }\n\n    canPlaceShip(coordinates) {\n        for (let [x, y] of coordinates) {\n            if (this.isOutOfBounds([x, y]) || this.isOccupied([x, y])) {\n                return false;\n            }\n            for (let dx = -1; dx <= 1; dx++) {\n                for (let dy = -1; dy <= 1; dy++) {\n                    const surroundingX = x + dx;\n                    const surroundingY = y + dy;\n                    if (\n                        (dx !== 0 || dy !== 0) &&\n                        !this.isOutOfBounds([surroundingX, surroundingY]) &&\n                        this.isOccupied([surroundingX, surroundingY])\n                    ) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    placeShip(ship, coordinates){\n        for(let coord of coordinates){\n            if(this.isOutOfBounds(coord) || this.isOccupied(coord)){\n                return false;\n            }\n        }\n        for(let coord of coordinates){\n            this.grid[`${coord[0]},${coord[1]}`] = ship;\n        }\n        this.ships.push({ship, coordinates});\n        return true;\n    }\n\n    getCoordinates(length, direction, [startX, startY]) {\n        const coordinates = [];\n        for (let i = 0; i < length; i++) {\n            const x = direction === 'horizontal' ? startX + i : startX;\n            const y = direction === 'vertical' ? startY + i : startY;\n            coordinates.push([x, y]);\n        }\n        return coordinates;\n    }\n\n    placeShipRandom(shipLenghts){\n        const directions = ['horizontal', 'vertical'];\n        for(let length of shipLenghts){\n            let placed = false;\n            while(!placed){\n                const startX = Math.floor(Math.random() * 10);\n                const startY = Math.floor(Math.random() * 10);\n                const direction = directions[Math.floor(Math.random() * directions.length)];\n                const shipCoordinates = this.getCoordinates(length, direction, [startX, startY]);\n                if(this.canPlaceShip(shipCoordinates)){\n                    const ship = new Ship(length);\n                    this.placeShip(ship, shipCoordinates);\n                    placed = true;\n                }\n            }\n        }\n    }\n\n    recieveAttack(coordinates){\n        if(!this.attackedCoordinates){\n            this.attackedCoordinates = new Set();\n        }\n        const coordString = coordinates.toString();\n        if(this.attackedCoordinates.has(coordString)){\n            return;\n        }\n        this.attackedCoordinates.add(coordString);\n\n        let hit = false;\n        for(let ship of this.ships){\n            if(ship.coordinates.some(coord => coord[0] === coordinates[0] && coord[1] === coordinates[1])){\n                ship.ship.hit();\n                hit = true;\n                break;\n            }\n        }\n        if(!hit){\n            this.missedAttacks.push(coordinates);\n        }\n    }\n\n    areAllShipsSunk(){\n        for(let ship of this.ships){\n            if(!ship.ship.isSunk()){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    getCellState(x, y) {\n        const coordKey = `${x},${y}`;\n        if(this.missedAttacks.some(([mx, my]) => mx === x && my === y)){\n            return 'miss';\n        }\n        if(this.attackedCoordinates.has(coordKey)){\n           if(this.ships.some(ship =>\n            ship.coordinates.some(coord => coord[0] === x && coord[1] === y)\n           )) {\n            return 'hit';\n           }\n        }\n        if(this.ships.some(ship =>\n            ship.coordinates.some(coord => coord[0] === x && coord[1] === y)\n        )){\n            return 'ship';\n        }\n        return 'empty';\n    }\n}\n\nexport default Gameboard;","\nimport Ship from './ship.js';\nimport Gameboard from './gameboard.js';\n\nclass Player {\n    constructor(type = 'real'){\n        this.type = type;\n        this.gameboard = new Gameboard();\n        this.previousMoves = [];\n        this.opponentGameboard = null;\n    }\n\n    setOpponentGameboard(opponent) {\n        if (!(opponent instanceof Player)) {\n            throw new Error(\"Opponent must be a Player instance!\");\n        }\n        this.opponentGameboard = opponent.gameboard;\n    }\n\n    makeMove(coordinates){\n        if (!this.opponentGameboard) {\n            throw new Error(\"Opponent gameboard is not set!\");\n        }\n        if (!this.isValidCoordinate(coordinates)) {\n            throw new Error(\"Invalid coordinates!\");\n        }\n       this.opponentGameboard.recieveAttack(coordinates);\n    }\n    \n    generateMove(){\n        if (!this.opponentGameboard) {\n            throw new Error(\"Opponent gameboard is not set!\");\n        }\n        let coordinates;\n        do{\n            coordinates = [\n                Math.floor(Math.random() * 10),\n                Math.floor(Math.random() * 10),\n            ];\n        } while(this.previousMoves.some((move) => move[0] === coordinates[0] && move[1] === coordinates[1]));\n        this.previousMoves.push(coordinates);\n        this.opponentGameboard.recieveAttack(coordinates);\n    }\n\n    isValidCoordinate(coordinates){\n        if(Array.isArray(coordinates) && coordinates.length === 2){\n            const [x, y] = coordinates;\n            if(x >= 0 && x <= 9 && y >= 0 && y <= 9){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nexport default Player;","\nimport gameController from \"./gameController.js\";\n\nconst DOMController = (() => {\n    const renderGameboard = (gameboard, playerId, hideShips = false) => {\n        const boardContainer = document.getElementById(`${playerId}-gameboard`);\n        boardContainer.innerHTML = '';\n       \n        for(let x = 0; x < 10; x++){\n            for(let y = 0; y < 10; y++){\n                const cell = document.createElement('div');\n                cell.dataset.coordinates = `${x},${y}`;\n\n                const cellState = gameboard.getCellState(x, y);\n                if(cellState === 'ship' && !hideShips){\n                    cell.classList.add('ship');\n                } else if(cellState === 'hit'){\n                    cell.classList.add('hit');\n                } else if(cellState === 'miss'){\n                    cell.classList.add('miss');\n                }\n                boardContainer.appendChild(cell);\n            }\n        }\n    };\n\n    const addCellEvents = (playerId, callback) => {\n        const boardContainer = document.getElementById(`${playerId}-gameboard`);\n        boardContainer.addEventListener('click', (event) => {\n            const cell = event.target;\n            if(!cell.dataset.coordinates) return;\n\n            const coordinates = cell.dataset.coordinates.split(',').map((coord) => parseInt(coord, 10));\n            callback(coordinates);\n        });\n    };\n    \n    const clearCellEvents = (playerId) => {\n        const boardContainer = document.getElementById(`${playerId}-gameboard`);\n        const clonedContainer = boardContainer.cloneNode(true);\n        boardContainer.parentNode.replaceChild(clonedContainer, boardContainer);\n    };\n\n    const randomShipPlacement = () => {\n        document.getElementById('randomizeShipsBtn').addEventListener('click', () => {\n            gameController.randomizeShips();\n        })\n    }\n\n    const resetGameBtn = () => {\n        document.getElementById('resetGameBtn').addEventListener('click', () => {\n            gameController.resetGame();\n        })\n    }\n\n    const updateTurnDisplay = (currentPlayer) => {\n        const turnDisplay = document.getElementById('game-message');\n        turnDisplay.classList.remove('playerTurnDisplay', 'computerTurnDisplay')\n        if(currentPlayer.type === 'real'){\n            turnDisplay.classList.add('playerTurnDisplay');\n        } else{\n            turnDisplay.classList.add('computerTurnDisplay');\n        }\n    }\n\n    const displayMessage = (message) => {\n        const messageBox = document.getElementById('game-message');\n        messageBox.textContent = message;\n    };\n\n    const renderAllBoards = (player1, player2) => {\n        renderGameboard(player1.gameboard, 'player1', false);\n        renderGameboard(player2.gameboard, 'player2', true);\n    }\n\n    return{\n        renderGameboard,\n        addCellEvents,\n        clearCellEvents,\n        randomShipPlacement,\n        resetGameBtn,\n        updateTurnDisplay,\n        displayMessage,\n        renderAllBoards,\n    };\n})();\n\nexport default DOMController;","\nimport '../styles.css';\nimport Ship from './ship.js';\nimport Gameboard from './gameboard.js';\nimport Player from './player.js';\nimport DOMController from './DOMController.js';\n\nconst gameController = (() => {\n    let player1, player2, currentPlayer;\n    let shipsPlaced = false;\n    let gameOver = false;\n    \n    const initializeGame = () => {\n        player1 = new Player('real');\n        player2 = new Player('computer');\n        player1.setOpponentGameboard(player2);\n        player2.setOpponentGameboard(player1);\n        DOMController.randomShipPlacement();\n        DOMController.resetGameBtn();\n        currentPlayer = player1;\n        DOMController.renderAllBoards(player1, player2);\n    };\n\n    const randomizeShips = () => {\n        player1.gameboard.clearBoard();\n        player2.gameboard.clearBoard();\n        const shipsLengths = [5, 4, 3, 3, 2];\n        player1.gameboard.placeShipRandom(shipsLengths);\n        player2.gameboard.placeShipRandom(shipsLengths);\n        DOMController.renderAllBoards(player1, player2);\n        shipsPlaced = true;\n        DOMController.addCellEvents('player2', handleAttack);\n    }\n\n    const resetGame = () => {\n        shipsPlaced = false;\n        gameOver = false;\n        player1.gameboard.clearBoard();\n        player2.gameboard.clearBoard();\n        currentPlayer = player1;\n        DOMController.renderAllBoards(player1, player2);\n        DOMController.clearCellEvents('player2');\n    }\n\n    const handleAttack = (coordinates) => {\n        if(gameOver) return;\n        try{\n            currentPlayer.makeMove(coordinates);\n            DOMController.renderAllBoards(player1, player2);\n            if(player1.gameboard.areAllShipsSunk()) return endGame('Computer wins!');\n            if(player2.gameboard.areAllShipsSunk()) return endGame('Player 1 wins!');\n            switchTurn();\n            if(currentPlayer.type === 'computer'){\n                handleComputerTurn();\n            } else {\n                DOMController.displayMessage('Player 1 turn');\n            }\n        } catch(error){\n            console.error(error.message);\n        }\n    };\n\n    const handleComputerTurn = () => {\n        setTimeout(() => {\n            currentPlayer.generateMove();\n            DOMController.renderGameboard(player1.gameboard, 'player1');\n            if(player1.gameboard.areAllShipsSunk()) return endGame('Player 2 wins!');\n            switchTurn();\n        }, 1000);\n    };\n\n    const switchTurn = () => {\n        if(currentPlayer === player1){\n            currentPlayer = player2;\n            DOMController.displayMessage('Computer turn');\n            DOMController.updateTurnDisplay(currentPlayer);\n        } else if(currentPlayer === player2){\n            currentPlayer = player1;\n            DOMController.displayMessage('Player 1 turn');\n            DOMController.updateTurnDisplay(currentPlayer);\n        }\n    };\n\n    const endGame = (message) => {\n        gameOver = true;\n        DOMController.displayMessage(message);\n    };\n\n    return{initializeGame, randomizeShips, resetGame};\n})();\n\nexport default gameController\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    gameController.initializeGame();\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Ship","length","_classCallCheck","this","hitCount","coordinates","value","Gameboard","ships","missedAttacks","grid","attackedCoordinates","Set","_ref","_ref2","_slicedToArray","x","y","_ref3","_ref4","undefined","concat","_step","_iterator","_createForOfIteratorHelper","s","n","done","_step$value","isOutOfBounds","isOccupied","dx","dy","surroundingX","surroundingY","err","e","f","ship","_step2","_iterator2","coord","_step3","_iterator3","push","direction","_ref5","_ref6","startX","startY","i","shipLenghts","_step4","directions","_iterator4","placed","Math","floor","random","shipCoordinates","getCoordinates","canPlaceShip","placeShip","coordString","toString","has","add","_step5","hit","_iterator5","some","_step6","_iterator6","isSunk","coordKey","_ref7","_ref8","mx","my","Player","type","arguments","gameboard","previousMoves","opponentGameboard","opponent","Error","isValidCoordinate","recieveAttack","move","Array","isArray","_coordinates","renderGameboard","DOMController","playerId","hideShips","boardContainer","document","getElementById","innerHTML","cell","createElement","dataset","cellState","getCellState","classList","appendChild","addCellEvents","callback","addEventListener","event","target","split","map","parseInt","clearCellEvents","clonedContainer","cloneNode","parentNode","replaceChild","randomShipPlacement","gameController","randomizeShips","resetGameBtn","resetGame","updateTurnDisplay","currentPlayer","turnDisplay","remove","displayMessage","message","textContent","renderAllBoards","player1","player2","gameOver","handleAttack","handleComputerTurn","switchTurn","endGame","makeMove","areAllShipsSunk","error","console","setTimeout","generateMove","initializeGame","setOpponentGameboard","clearBoard","shipsLengths","placeShipRandom"],"sourceRoot":""}